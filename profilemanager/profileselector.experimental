/*
 * profileselector.c - provides a custom widget for selecting ICC profiles
 * given a SearchPath pointing to the profile locations.
 *
 * Copyright (c) 2006-2008 by Alastair M. Robinson
 * Distributed under the terms of the GNU General Public License -
 * see the file named "COPYING" for more details.
 *
 */


/* FIXME:  A destructor is needed for this class, to free up the option list.
   As it stands, a certain amount of memory will be lost when the widget is
   destroyed.
*/
#include <iostream>

#include <string.h>

#include <gtk/gtkentry.h>
#include <gtk/gtkcombobox.h>
#include <gtk/gtktreemodel.h>
#include <gtk/gtktreeselection.h>
#include <gtk/gtkcellrenderertext.h>
#include <gtk/gtkcelllayout.h>
#include <gtk/gtklist.h>
#include <gtk/gtkfilesel.h>
#include <gtk/gtkfilechooser.h>
#include <gtk/gtkmenuitem.h>

#include "../support/generaldialogs.h"

#include "profileselector.h"

#include "../config.h"
#include "../gettext.h"

#define _(x) gettext(x)
#define N_(x) gettext_noop(x)

static char *PS_ESCAPESTRING="Other...";

using namespace std;

enum {
	CHANGED_SIGNAL,
	LAST_SIGNAL
};

static guint profileselector_signals[LAST_SIGNAL] = { 0 };

static void profileselector_class_init (ProfileSelectorClass *klass);
static void profileselector_init (ProfileSelector *sel);


// Declare multiple columns for GTK's tree model.
enum
{
  FILENAME_COLUMN = 0,	// Filename
  DISPLAYNAME_COLUMN,	// User-visible name.  Will be the same as Filename if
  						// there is no display name defined.
  NUM_COLUMNS
};


static gint find_by_filename(ProfileSelector *c,const char *fn)
{
	GtkTreeIter iter;
	char *txt;
	gint idx=-1;
	gboolean cont=gtk_tree_model_get_iter_first(GTK_TREE_MODEL(c->liststore),&iter);
	while(cont)
	{
		++idx;
		gtk_tree_model_get(GTK_TREE_MODEL(c->liststore),&iter,FILENAME_COLUMN,&txt,-1);
		if(txt)
		{
			if(strcmp(txt,fn)==0)
				cont=false;
			g_free(txt);
		}
		cont=gtk_tree_model_iter_next(GTK_TREE_MODEL(c->liststore),&iter);
		if(!cont)
			idx=-1;
	}
	return(idx);
}


static int mycmp(const void *s1,const void *s2)
{
	return(strcmp((const char *)s1,(const char *)s2));
}


static bool verifyprofile(ProfileSelector *c,ProfileInfo *pi)
{
	try
	{
		if(c->colourspace || (!c->allowdevicelink))
		{
			if(c->colourspace)
			{
				if(pi->GetColourSpace()!=c->colourspace)
					throw "Ignoring profile - wrong colourspace";
			}
			if(!c->allowdevicelink)
			{
				if(pi->IsDeviceLink())
					throw "Ignoring profile - can't use devicelinks";
			}
		}
		return(true);
	}
	catch(const char *err)
	{
//		cerr << "Profile Selector: " << err << endl;
	}
	return(false);
}


static void rebuild_menu(ProfileSelector *c)
{
	if(c->menu)
		gtk_option_menu_remove_menu(GTK_OPTION_MENU(c->optionmenu));
	c->menu=gtk_menu_new();

	// Build popup menu from optionlist...
	GList *iter=c->optionlist;
	while(iter)
	{
		gchar *text=(gchar *)iter->data;
		GtkWidget *menu_item = gtk_menu_item_new_with_label (text);
		gtk_menu_shell_append (GTK_MENU_SHELL (c->menu), menu_item);
		gtk_widget_show (menu_item);
		iter=g_list_next(iter);
	}	
	gtk_option_menu_set_menu(GTK_OPTION_MENU(c->optionmenu),c->menu);
}


static void profileselector_build_options(ProfileSelector *c)
{
	GtkTreeIter iter;

	ProfileInfo *pi=c->pm->GetFirstProfileInfo();
	while(pi)
	{
		const char *filename=pi->GetFilename();
		if(find_by_filename(c,filename)==-1)
		{
			if(verifyprofile(c,pi))
			{
				const char *displayname=pi->GetDescription();
				if(!displayname)
					displayname=filename;
				gtk_list_store_append (GTK_LIST_STORE(c->liststore), &iter);
				gtk_list_store_set (GTK_LIST_STORE(c->liststore), &iter,
					FILENAME_COLUMN, filename,
					DISPLAYNAME_COLUMN, displayname,
					-1);
			}
		}
		pi=pi->Next();
	}
	// "Other..." option, pops up a file selector.
	gtk_list_store_append (GTK_LIST_STORE(c->liststore), &iter);
	gtk_list_store_set (GTK_LIST_STORE(c->liststore), &iter,
		FILENAME_COLUMN, NULL,
		DISPLAYNAME_COLUMN, _("Other..."),
		-1);

	// Old stuff:
	
	if(c->optionlist)
	{
		GList *element;
		element=c->optionlist;
		while(element)
		{
			g_free(element->data);
			element=g_list_next(element);
		}
		g_list_free(c->optionlist);
		c->optionlist=NULL;
	}

	pi=c->pm->GetFirstProfileInfo();
	while(pi)
	{
		const char *filename=pi->GetFilename();
		if(!g_list_find_custom(c->optionlist,filename,mycmp))
		{
			if(verifyprofile(c,pi))
			{
				c->optionlist=g_list_append(c->optionlist,g_strdup(filename));
			}
		}
		pi=pi->Next();
	}

	c->optionlist=g_list_sort(c->optionlist,mycmp);

	// "Other..." option, pops up a file selector.
	c->optionlist=g_list_append(c->optionlist,g_strdup(PS_ESCAPESTRING));

	rebuild_menu(c);
}


static void	profileselector_changed(GtkWidget *widget,gpointer user_data)
{
	ProfileSelector *c=PROFILESELECTOR(user_data);
	GtkOptionMenu *om=GTK_OPTION_MENU(c->optionmenu);

	gint index=gtk_option_menu_get_history(om);
	const char *val=NULL;
	if(c->optionlist)
		val=(const char *)g_list_nth_data(c->optionlist,index);

	if(val && strlen(val))
	{
		if(strcmp(val,PS_ESCAPESTRING)==0)
		{
			char *fn=File_Dialog("Choose ICC Profile...",NULL,NULL);
			if(fn)
			{
				profileselector_set_filename(c,fn);
				val=NULL;
			}
			else
				val=c->filename;
		}
		if(val)
			profileselector_set_filename(c,val);

		g_signal_emit(G_OBJECT (c),
			profileselector_signals[CHANGED_SIGNAL], 0);
	}
}


static void	combo_changed(GtkWidget *widget,gpointer user_data)
{
	ProfileSelector *c=PROFILESELECTOR(user_data);
	GtkTreeIter iter;
	
	if(gtk_combo_box_get_active_iter(GTK_COMBO_BOX(c->combobox),&iter))
	{
		const char *txt;
		gtk_tree_model_get(GTK_TREE_MODEL(c->liststore),&iter,FILENAME_COLUMN,&txt,-1);
		if(txt)
		{
			cerr << "Setting tooltip to: " << txt << endl;
			gtk_tooltips_set_tip(c->tooltips,GTK_WIDGET(c->optionmenu),txt,txt);
			gtk_tooltips_enable(c->tooltips);
		}
		else
			gtk_tooltips_disable(c->tooltips);
		g_signal_emit(G_OBJECT (c),
			profileselector_signals[CHANGED_SIGNAL], 0);
	}
}


static void mydatafunc(GtkCellLayout *cell_layout, GtkCellRenderer *cell,
	GtkTreeModel *tree_model,GtkTreeIter *iter,gpointer data)
{
	const char *txt;
	gtk_tree_model_get(tree_model,iter,DISPLAYNAME_COLUMN,&txt,-1);
	g_object_set(G_OBJECT(cell),"text",txt,NULL);
}


GtkWidget*
profileselector_new (ProfileManager *pm,IS_TYPE colourspace,bool allowdevicelink)
{
	ProfileSelector *c=PROFILESELECTOR(g_object_new (profileselector_get_type (), NULL));

	c->pm=pm;
	c->colourspace=colourspace;
	c->allowdevicelink=allowdevicelink;

	c->optionmenu=gtk_option_menu_new();
	c->menu=NULL;  // Built on demand...

	c->tooltips=gtk_tooltips_new();

	// New-style combo
	c->liststore=gtk_list_store_new(NUM_COLUMNS,G_TYPE_STRING,G_TYPE_STRING);
	c->combobox=gtk_combo_box_new_with_model(GTK_TREE_MODEL(c->liststore));

	gtk_tooltips_set_tip(c->tooltips,GTK_WIDGET(c->optionmenu),"Select colour profile","Select colour profile");
	gtk_tooltips_enable(c->tooltips);

	GtkCellRenderer *rend = gtk_cell_renderer_text_new ();
	gtk_cell_layout_pack_start (GTK_CELL_LAYOUT(c->combobox),rend,TRUE);
	gtk_cell_layout_set_cell_data_func(GTK_CELL_LAYOUT(c->combobox),rend,mydatafunc,
		NULL,NULL);

	g_signal_connect(c->combobox,"changed",G_CALLBACK(combo_changed),c);

	gtk_box_pack_start(GTK_BOX(c),GTK_WIDGET(c->combobox),TRUE,TRUE,0);
	gtk_widget_show(c->combobox);


	gtk_box_pack_start(GTK_BOX(c),GTK_WIDGET(c->optionmenu),TRUE,TRUE,0);

	GtkWidget *frame=gtk_frame_new(NULL);
	gtk_frame_set_shadow_type(GTK_FRAME(frame),GTK_SHADOW_IN);
	gtk_box_pack_start(GTK_BOX(c),GTK_WIDGET(frame),TRUE,FALSE,0);

	c->description=gtk_label_new("");
	gtk_container_add(GTK_CONTAINER(frame),GTK_WIDGET(c->description));
	
	gtk_widget_show(c->description);
	gtk_widget_show(frame);
	gtk_widget_show(c->optionmenu);

	profileselector_build_options(c);
	g_signal_connect(c->optionmenu,"changed",G_CALLBACK(profileselector_changed),c);

	gint index=gtk_option_menu_get_history(GTK_OPTION_MENU(c->optionmenu));
	const char *val=NULL;
	if(c->optionlist)
		val=(const char *)g_list_nth_data(c->optionlist,index);
	if(val)
		profileselector_set_filename(c,val);

	return(GTK_WIDGET(c));
}


GType
profileselector_get_type (void)
{
	static GType stpuic_type = 0;

	if (!stpuic_type)
	{
		static const GTypeInfo profileselector_info =
		{
			sizeof (ProfileSelectorClass),
			NULL, /* base_init */
			NULL, /* base_finalize */
			(GClassInitFunc) profileselector_class_init,
			NULL, /* class_finalize */
			NULL, /* class_data */
			sizeof (ProfileSelector),
			0,
			(GInstanceInitFunc) profileselector_init,
		};
		stpuic_type = g_type_register_static (GTK_TYPE_VBOX, "ProfileSelector", &profileselector_info, GTypeFlags(0));
	}
	return stpuic_type;
}


static void
profileselector_class_init (ProfileSelectorClass *klass)
{
	profileselector_signals[CHANGED_SIGNAL] =
	g_signal_new ("changed",
		G_TYPE_FROM_CLASS (klass),
		GSignalFlags(G_SIGNAL_RUN_FIRST | G_SIGNAL_ACTION),
		G_STRUCT_OFFSET (ProfileSelectorClass, changed),
		NULL, NULL,
		g_cclosure_marshal_VOID__VOID, G_TYPE_NONE, 0);
}


static void
profileselector_init (ProfileSelector *c)
{
	c->optionlist=NULL;
	c->filename=NULL;
	c->liststore=NULL;
	c->combobox=NULL;
	c->tooltips=NULL;
}


gboolean profileselector_refresh(ProfileSelector *c)
{
	g_signal_handlers_block_matched (G_OBJECT (c->optionmenu), 
                                         G_SIGNAL_MATCH_DATA,
                                         0, 0, NULL, NULL, c);
	profileselector_build_options(c);
	g_signal_handlers_unblock_matched (G_OBJECT (c->optionmenu), 
                                         G_SIGNAL_MATCH_DATA,
                                         0, 0, NULL, NULL, c);
	return(true);
}


void profileselector_set_type(ProfileSelector *c,IS_TYPE colourspace)
{
	colourspace=IS_TYPE(STRIP_ALPHA(colourspace));
	IS_TYPE oldcolourspace=c->colourspace;
	if(colourspace!=IS_TYPE_NULL && (oldcolourspace!=colourspace))
	{
		c->colourspace=colourspace;
		profileselector_build_options(c);
		rebuild_menu(c);
		const char *def=NULL;
		CMSProfile *defp=c->pm->GetDefaultProfile(colourspace);
		if(defp)
		{
			if((def=defp->GetFilename()))
				profileselector_set_filename(c,def);
			delete defp;
		}
	}
}


void profileselector_set_filename(ProfileSelector *c,const char *filename)
{
	char *fn=c->pm->MakeRelative(filename);

	// If the supplied filename doesn't exist, to avoid silently changing
	// the profile to one that does, we create a new entry, with "Warning: not found"
	// as the display name.  The filename will be set as a tooltip, as usual.

//	if(verifyprofile(c,fn))
//	{
		if(c->filename)
			free(c->filename);
		c->filename=fn; // Don't free fn, c->filename has "adopted" it.
		
		// If the filename is not present, add it.

		GList *node;
		if((node=g_list_find_custom(c->optionlist,c->filename,mycmp)))
		{
			gint i=g_list_position(c->optionlist,node);
			gtk_option_menu_set_history(GTK_OPTION_MENU(c->optionmenu),i);			
		}
		else
		{
			g_signal_handlers_block_matched (G_OBJECT (c->optionmenu), 
		                                         G_SIGNAL_MATCH_DATA,
		                                         0, 0, NULL, NULL, c);

			c->optionlist=g_list_append(c->optionlist,g_strdup(c->filename));
			rebuild_menu(c);
			gtk_option_menu_set_history(GTK_OPTION_MENU(c->optionmenu),g_list_length(c->optionlist)-1);

			g_signal_handlers_unblock_matched (G_OBJECT (c->optionmenu), 
		                                         G_SIGNAL_MATCH_DATA,
		                                         0, 0, NULL, NULL, c);
		}

		try
		{
			CMSProfile *profile=c->pm->GetProfile(c->filename);
			if(profile)
			{
				gsize in,out;
				gchar *entry=g_locale_to_utf8(profile->GetDescription(),-1,&in,&out,NULL);
				gtk_label_set_text(GTK_LABEL(c->description),entry);
				delete profile;
			}
			else
				gtk_label_set_text(GTK_LABEL(c->description),"Warning: can't open profile!");
		}
		catch(const char *err)
		{
			cerr << "Profile Selector: " << err << endl;
		}
//	}
}


const char *profileselector_get_filename(ProfileSelector *p)
{
	return(p->filename);
}
